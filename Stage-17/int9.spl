//exec system call
//[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
alias userSP R0;
alias inodeind R3;
userSP=SP;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=9;
alias fname R1;
fname=[[PTBR+2*((userSP-4)/512)]*512+((userSP-4)%512)];
alias i R2;
i=0;
//checking validity of file
while(i<MAX_FILE_NUM) do
	if([INODE_TABLE+i*16+1]==fname) then
		inodeind=i;
		break;
	endif;
	i=i+1;
endwhile;
if(i==MAX_FILE_NUM) then
	R3=([PTBR+2*((userSP-1)/512)]*512)+((userSP-1)%512);
	[R3]=-1;
	[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
	SP=userSP;
	ireturn;
endif;
multipush(R0,R1,R2,R3);
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1; //exit process function
multipop(R0,R1,R2,R3);
R4=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11];
[MEMORY_FREE_LIST+R4]=[MEMORY_FREE_LIST+R4]+1;
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
SP=R4*512-1;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4]=RUNNING;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+7]=inodeind;
PTBR=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+14];
[PTBR+1]="0100";
[PTBR+3]="0100";
backup;
R1=1;
call MOD_2;
[PTBR+4]=R0;
[PTBR+5]="0110";
call MOD_2;
[PTBR+6]=R0;
[PTBR+7]="0110";
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";
restore;
i=0;
while(i<3) do
	if([INODE_TABLE+inodeind*16+8+i]!=-1) then
		backup;
		R1=1;
		call MOD_2;
		[PTBR+8+i*2]=R0;
		[PTBR+9+i*2]="0100";
		restore;
		backup;
		R4=[INODE_TABLE+inodeind*16+8+i];
		R1=2;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=[PTBR+8+i*2];
		call MOD_4;
		restore;
	endif;
	i=i+1;
endwhile;
[[PTBR+16]*512]=[[PTBR+8]*512+1];
SP=8*512;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
ireturn;
