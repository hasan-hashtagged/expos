
alias userSP R0;
userSP=SP;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

//setting mode flag of process table to system call number=9
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=9;

breakpoint;


//extracting filename from the user stack
alias filename R1;
filename =[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
alias i R2;
i=0;
while(i<60) do
	if([INODE_TABLE+i*16+1]==filename &&[INODE_TABLE+i*16]==EXEC) then
			break;
	endif;
	i=i+1;
endwhile;

if(i==60) then
	alias physicalAddrRetVal R3;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
	 SP = userSP;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;
endif;
//index i is present in R2

//calling exit process function to deallocate pages
multipush(R0,R1,R2,R3);
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
multipop(R0,R1,R2,R3);


//reclaiming user area page no for current process(deallocated by freeuserareapage in mod_1)
//updating memory free list entry for the user area page number
[MEMORY_FREE_LIST+[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]]=[MEMORY_FREE_LIST+[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]]+1;

//updating mem free count
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

//initializing kernel stack for new process
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

//storing index of inode of the new process in its process table
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7]=i;

//setting new process to running 
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=RUNNING;

//initializing ptbr entries for shared library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//calling get_free_page repeatedly
multipush(R0,R1,R2,R3);
R1=1;
call MOD_2;
[PTBR+4]=R0;
[PTBR+5]="0110";
R1=1;
call MOD_2;
[PTBR+6]=R0;
[PTBR+7]="0110";
R1=1;
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
R1=1;
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";

alias count R4;
alias k R8;
k=0;
count=0;

//counting number of blocks in the file
while(k<4) do
if([INODE_TABLE+16*i+8+k]!=-1) then
	count=count+1;
else
	break;
endif;
k=k+1;
endwhile;

//allocating pages for code
k=8;
alias count1 R9;
count1=count;
while(count>0) do
	R1=1;
	call MOD_2;
	[PTBR+k]=R0;
	[PTBR+k+1]="0100";
	count=count-1;
	k=k+2;
	endwhile;
alias j R5;

//loading blocks from disk to memory
j=8;
k=0;
while(count1>0) do
	loadi([PTBR+j],[INODE_TABLE+16*i+8+k]);
	j=j+2;
	k=k+1;
	count1=count1-1;
endwhile;
multipop(R0,R1,R2,R3);
breakpoint;

//setting entry point value to top of user stack
[[PAGE_TABLE_BASE+20*[SYSTEM_STATUS_TABLE+1]+16]*512]=[[PAGE_TABLE_BASE+20*[SYSTEM_STATUS_TABLE+1]+8]*512+1];

SP =8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
breakpoint;
ireturn;
